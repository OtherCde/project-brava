name: Update Repository & Deploy Changes

on:
    pull_request:
      branches: [main]  # Se activa cuando se crea o mergea un PR en main
      types: [closed]  # Se ejecuta solo cuando el PR es cerrado (mergeado)
    workflow_dispatch:  # Permite ejecutarlo manualmente desde GitHub Actions

jobs:
  update-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Configurar SSH
        run: |
          echo "üîπ Creando la clave privada..." 
          echo "${{ secrets.SSH_MAIN }}" > private_key
          chmod 600 private_key 
          
          echo "üîπ Iniciando ssh-agent..."
          eval "$(ssh-agent -s)"
          
          export SSH_ASKPASS=/bin/echo
          echo "üîπ Agregando clave SSH con passphrase..." 
          echo "${{ secrets.SSH_PASSPHRASE }}" | setsid ssh-add private_key
          
          echo "üîπ Configurando ~/.ssh/config..."
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
           
          echo "‚úÖ Configuraci√≥n SSH completada"

      - name: Actualizar repositorio
        run: |
          echo "üîπ Verificando existencia de private_key..."
          ls -l private_key || echo "‚ö†Ô∏è ERROR: private_key no encontrado"
          
          echo "üîπ Iniciando ssh-agent..."
          eval "$(ssh-agent -s)"
          
          echo "üîπ Agregando clave privada al ssh-agent con passphrase..."
          echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add private_key 
          
          echo "üîπ Conectando al servidor y ejecutando despliegue..."
          ssh -i private_key brava-ssh@64.227.97.181 << "EOF"
            set -e  # Detener ante errores
            cd htdocs/brava.okarol.com  # Aseg√∫rate de que esta ruta sea correcta
      
            # Sobrescribir .env copiando el contenido de .env.example
            cp .env.example .env
            
            # Actualizar las variables del .env con los valores de GitHub Secrets
            sed -i '/^SECRET_KEY=/d' .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
      
            sed -i '/^DB_NAME=/d' .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
      
            sed -i '/^DB_USER=/d' .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
      
            sed -i '/^DB_PASSWORD=/d' .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
      
            sed -i '/^DB_HOST=/d' .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
      
            sed -i '/^DB_PORT=/d' .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
      
            sed -i '/^GOOGLE_CLIENT_ID=/d' .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_ID }}" >> .env
      
            sed -i '/^GOOGLE_CLIENT_SECRET=/d' .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_SECRET }}" >> .env
      
            sed -i '/^FACEBOOK_APP_ID=/d' .env
            echo "FACEBOOK_APP_ID=${{ secrets.FACEBOOK_ID }}" >> .env
      
            sed -i '/^FACEBOOK_APP_SECRET=/d' .env
            echo "FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_SECRET }}" >> .env
      
            sed -i '/^FACEBOOK_REDIRECT_URI=/d' .env
            echo "FACEBOOK_REDIRECT_URI=${{ secrets.FACEBOOK_REDIRECT }}" >> .env
            
            # Actualizar el repositorio
            OLD_COMMIT=$(git rev-parse HEAD)
            git pull origin main  # Se actualiza desde la rama main
      
            # Instalar dependencias (si es necesario)
            source env-brav/bin/activate  # Activar tu entorno virtual
            pip install -r requirements.txt
      
            # Ejecutar migraciones solo si hubo cambios
            if [ "$OLD_COMMIT" != "$(git rev-parse HEAD)" ]; then
              python manage.py migrate
            fi
      
            echo "‚úÖ Actualizaci√≥n completada"
            exit
          EOF
