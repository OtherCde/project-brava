name: Update Repository & Deploy Changes

on:
    pull_request:
      branches: [main]  # Se activa cuando se crea o mergea un PR en main
      types: [closed]  # Se ejecuta solo cuando el PR es cerrado (mergeado)
    workflow_dispatch:  # Permite ejecutarlo manualmente desde GitHub Actions

jobs:
  update-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Configurar SSH
        run: |
          echo "🔹 Creando la clave privada..." 
          echo "${{ secrets.SSH_MAIN }}" > private_key
          chmod 600 private_key 
          
          echo "🔹 Iniciando ssh-agent..."
          eval "$(ssh-agent -s)"
          
          export SSH_ASKPASS=/bin/echo
          echo "🔹 Agregando clave SSH con passphrase..." 
          echo "${{ secrets.SSH_PASSPHRASE }}" | setsid ssh-add private_key
          
          echo "🔹 Configurando ~/.ssh/config..."
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
           
          echo "✅ Configuración SSH completada"

      - name: Actualizar repositorio
        run: |
          echo "🔹 Verificando existencia de private_key..."
          ls -l private_key || echo "⚠️ ERROR: private_key no encontrado"
          
          echo "🔹 Iniciando ssh-agent..."
          eval "$(ssh-agent -s)"
          
          echo "🔹 Agregando clave privada al ssh-agent con passphrase..."
          echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add private_key 
          
          echo "🔹 Conectando al servidor y ejecutando despliegue..."
          ssh -i private_key brava-ssh@64.227.97.181 << "EOF"
            set -e  # Detener ante errores
            cd htdocs/brava.okarol.com  # Asegúrate de que esta ruta sea correcta
      
            echo "🔹 Configurando .env..."
            test -f .env || cp .env.example .env
            
            # Modificar SOLO las variables necesarias utilizando sed
            sed -i "s|^SECRET_KEY=.*|SECRET_KEY=${{ secrets.SECRET_KEY }}|" .env
            sed -i "s|^DB_NAME=.*|DB_NAME=${{ secrets.DB_NAME }}|" .env
            sed -i "s|^DB_USER=.*|DB_USER=${{ secrets.DB_USER }}|" .env
            sed -i "s|^DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|" .env
            sed -i "s|^DB_HOST=.*|DB_HOST=${{ secrets.DB_HOST }}|" .env
            sed -i "s|^DB_PORT=.*|DB_PORT=${{ secrets.DB_PORT }}|" .env
            sed -i "s|^GOOGLE_CLIENT_ID=.*|GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_ID }}|" .env
            sed -i "s|^GOOGLE_CLIENT_SECRET=.*|GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_SECRET }}|" .env
            sed -i "s|^FACEBOOK_APP_ID=.*|FACEBOOK_APP_ID=${{ secrets.FACEBOOK_ID }}|" .env
            sed -i "s|^FACEBOOK_APP_SECRET=.*|FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_SECRET }}|" .env
            sed -i "s|^FACEBOOK_REDIRECT_URI=.*|FACEBOOK_REDIRECT_URI=${{ secrets.FACEBOOK_REDIRECT }}|" .env
            
            # Actualizar el repositorio
            OLD_COMMIT=$(git rev-parse HEAD)
            git pull origin main  # Se actualiza desde la rama main
      
            # Instalar dependencias (si es necesario)
            source env-brav/bin/activate  # Activar tu entorno virtual
            pip install -r requirements.txt
      
            # Verificar si hay migraciones pendientes
            if [ "$(python manage.py showmigrations --plan | grep '\[ \]')" ]; then
              echo "Migraciones pendientes. Ejecutando migrate..."
              python manage.py migrate
            else
              echo "No hay migraciones pendientes."
            fi
      
            echo "✅ Actualización completada"
            exit
          EOF
